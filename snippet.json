{
	"jsdocFunc": {
		"prefix": "jsdocFunc",
		"body": [
			"/**",
			" * @function",
			" * ${Description}",
			" * @param {${param_type}} ${param_name}",
			" */"
		],
		"description": "jsdocFunc"
	},
	"jsdocCallback": {
		"prefix": "jsdocCallback",
		"body": [
			"/**",
			" * ${Description}",
			" * @callback ${callbackName}",
			" * @param {${param_type}} ${param_name}",
			" */"
		],
		"description": "jsdocCallback"
	},
	"jsdocConstructor": {
		"prefix": "jsdocConstructor",
		"body": [
			"/**",
			" * ${Description}",
			" * @constructor",
			" * @param {${param_type}} ${param_name}",
			" */"
		],
		"description": "jsdocConstructor"
	},
	"jsdocReturn": {
		"prefix": "jsdocFuncRet",
		"body": [
			"/**",
			" * @function",
			" * ${Description}",
			" * @param {${param_type}} ${param_name}",
			"*  @return {${return_type}}",
			" */"
		],
		"description": "jsdocReturn"
	},
	"jsdocClass": {
		"prefix": "jsdocClass",
		"body": [
			"/**",
			" * ${Description}",
			"* @class",
			" */"
		],
		"description": "jsdocClass"
	},
	"jsdocAsyncFunc": {
		"prefix": "jsdocAsyncFunc",
		"body": [
			"/**",
			" * @async",
			" * @function",
			" * ${Description}",
			" * @param {${param_type}} ${param_name}",
			" */"
		],
		"description": "jsdocAsyncFunc"
	},
	"jsdocAsyncFuncRet": {
		"prefix": "jsdocAsyncFuncRet",
		"body": [
			"/**",
			" * @async",
			" * @function",
			" * ${Description}",
			" * @param {${param_type}} ${param_name}",
			"*  @return {${return_type}}",
			" */"
		],
		"description": "jsdocAsyncFuncRet"
	},
	"jsdocTypedef": {
		"prefix": "jsdocTypedef",
		"body": [
			"/**",
			" * ${description}",
			" * @typedef {${type}} ${type_name}",
			" */"
		],
		"description": "jsdocTypedef"
	},
	"jsdocType": {
		"prefix": "jsdocType",
		"body": [
			"/**",
			" * ${description}",
			" * @type {${type}}",
			" */"
		],
		"description": "jsdocType"
	},
	"jsdocImport": {
		"prefix": "jsdocImport",
		"body": [
			"/**",
			" *  @typedef {import('${module_name}').${class_name}} ${class_name}",
			"*/",
			""
		],
		"description": "jsdocImport"
	},
	"timePerformance": {
		"prefix": "timePerformance",
		"body": [
			"console.time('${name}')",
			"",
			"${code}",
			"",
			"console.timeEnd('${name}')"
		],
		"description": "timePerformance"
	},
	"conTrace": {
		"prefix": "conTrace",
		"body": [
			"console.trace(${log})"
		],
		"description": "conTrace"
	},
	"importModule": {
		"prefix": "importModule",
		"body": [
			"import ${module} from '${moduleName}'"
		],
		"description": "importModule"
	},
	"importObject": {
		"prefix": "importObject",
		"body": [
			"import { ${2:module} } from '${1:moduleName}'"
		],
		"description": "importObject"
	},
	"exportDefault": {
		"prefix": "exportDefault",
		"body": [
			"export { default as ${2:moduleName} } from './${1:module}'"
		],
		"description": "exportDefault"
	},
	"nodeMain": {
		"prefix": "nodeMain",
		"body": [
			"",
			"const main = async (id) => {",
			"  console.log(`finished ${id}`)",
			"}",
			"",
			"main().catch(err => console.error(err))"
		],
		"description": "nodeMain"
	},
	"nodeWriteFile": {
		"prefix": "nodeWriteFile",
		"body": [
			"fs.writeFileSync(`${__dirname}/result.html`, data, { encoding: 'utf8' })"
		],
		"description": "nodeWriteFile"
	},
	"nodeAxios": {
		"prefix": "nodeAxios",
		"body": [
			"const { data } = await axios.get(url)"
		],
		"description": "nodeAxios"
	},
	"reactPageWrapper": {
		"prefix": "reactPageWrapper",
		"body": [
			"import React from 'react'",
			"import PropTypes from 'prop-types'",
			"",
			"import { withWrapper } from '../../hocs'",
			"import { routePaths, storeItemKeys } from '../../constants'",
			"",
			"import PageComponent from './PageComponent'",
			"",
			"class ${PageWrapper} extends React.Component {",
			"  state = {",
			"    isLoading: false,",
			"    redirectPath: routePaths.HOME,",
			"    shouldRedirect: false,",
			"  }",
			"",
			"  render() {",
			"    const {",
			"      props: { store: { user } },",
			"    } = this",
			"    return (",
			"      <PageComponent",
			"        {...this.state}",
			"        user={user}",
			"      />",
			"    )",
			"  }",
			"}",
			"",
			"",
			"const { USER } = storeItemKeys",
			"const wantedStoreKeys = [USER]",
			"",
			"${PageWrapper}.propTypes = {",
			"  store: PropTypes.shape({",
			"    user: PropTypes.object,",
			"  }).isRequired,",
			"}",
			"${PageWrapper}.defaultProps = {",
			"}",
			"",
			"export default withWrapper(${PageWrapper}, wantedStoreKeys)",
			""
		],
		"description": "reactPageWrapper"
	},
	"reactPageComponent": {
		"prefix": "reactPageComponent",
		"body": [
			"import React from 'react'",
			"import { Button } from 'react-bootstrap'",
			"import PropTypes from 'prop-types'",
			"",
			"import { Wrapper, FormInput } from '../../components'",
			"import { utilAPI } from '../../utils'",
			"",
			"class ${PageComponent} extends React.Component {",
			"  render() {",
			"    const {",
			"      props: {",
			"        isLoading, redirectPath, shouldRedirect, onClick,",
			"      },",
			"    } = this",
			"",
			"    return (",
			"      <Wrapper isLoading={isLoading}>",
			"        <FormInput",
			"          label=\"Email\"",
			"          placeholder=\"email\"",
			"          onChange={utilAPI.onChange(this, 'email')}",
			"          type=\"email\"",
			"        />",
			"        <Button",
			"          variant=\"primary\"",
			"          onClick={onClick}",
			"        >",
			"          ${PageComponent}",
			"        </Button>",
			"        {utilAPI.redirect(redirectPath, shouldRedirect)}",
			"      </Wrapper>",
			"    )",
			"  }",
			"}",
			"",
			"${PageComponent}.propTypes = {",
			"  isLoading: PropTypes.bool,",
			"  redirectPath: PropTypes.string,",
			"  shouldRedirect: PropTypes.bool,",
			"  onClick: PropTypes.func,",
			"}",
			"${PageComponent}.defaultProps = {",
			"  isLoading: false,",
			"  redirectPath: '',",
			"  shouldRedirect: false,",
			"  onClick: () => console.log('button clicked'),",
			"}",
			"",
			"",
			"export default ${PageComponent}",
			""
		],
		"description": "reactPageComponent"
	},
	"reactComponent": {
		"prefix": "reactComponent",
		"body": [
			"import React from 'react'",
			"import { Button } from 'react-bootstrap'",
			"import PropTypes from 'prop-types'",
			"",
			"class ${className} extends React.Component {",
			"  render() {",
			"    const {",
			"      props: { name },",
			"    } = this",
			"",
			"    return (",
			"      <div>",
			"        ${className}",
			"      </div>",
			"    )",
			"  }",
			"}",
			"",
			"${className}.propTypes = {",
			"  name: PropTypes.string,",
			"}",
			"${className}.defaultProps = {",
			"  name: '${className}',",
			"}",
			"",
			"",
			"export default ${className}",
			""
		],
		"description": "reactComponent"
	},
	"reactShouldComponentUpdate": {
		"prefix": "reactShouldComponentUpdate",
		"body": [
			"shouldComponentUpdate(nextProps, nextState) {",
			"  const { props, state } = this",
			"  const SENSITIVE_PROPS = ['${propName}',]",
			"  const flag = SENSITIVE_PROPS.some(val => props[val] !== nextProps[val])",
			"  return flag || state !== nextState",
			"}"
		],
		"description": "reactShouldComponentUpdate"
	},
	"reactAddEvents": {
		"prefix": "reactAddEvents",
		"body": [
			"componentDidMount() {",
			"  Object.keys(this.events).forEach((eventName) => {",
			"    this.element.addEventListener(eventName, this.events[eventName])",
			"  })",
			"}",
			"",
			"componentWillUnmount() {",
			"  Object.keys(this.events).forEach((eventName) => {",
			"    this.element.removeEventListener(eventName, this.events[eventName])",
			"  })",
			"}"
		],
		"description": "reactAddEvents"
	},
	"reactConstructor": {
		"prefix": "reactConstructor",
		"body": [
			"constructor(props) {",
			"  super(props)",
			"  this.state = {",
			"  }",
			"}"
		],
		"description": "reactConstructor"
	},
	"reactPageStory": {
		"prefix": "reactPageStory",
		"body": [
			"import React from 'react'",
			"import { storiesOf } from '@storybook/react'",
			"import { action } from '@storybook/addon-actions'",
			"import {",
			"  text, number, array, boolean,",
			"} from '@storybook/addon-knobs'",
			"",
			"",
			"import ${PageName} from '../../src/pages/Home/index'",
			"",
			"export const getDefaultData = () => (",
			"  {",
			"    isLoading: boolean('isLoading', false),",
			"    onClick: action('onClick'),",
			"  }",
			")",
			"export const getWithOtherData = () => (",
			"  {",
			"    isLoading: boolean('isLoading', false),",
			"    onClick: action('onClick'),",
			"  }",
			")",
			"",
			"storiesOf('${PageName}', module)",
			"  .add('default', () => (",
			"    <${PageName}",
			"      {...getDefaultData()}",
			"    />",
			"  )).add('withOther', () => (",
			"    <${PageName}",
			"      {...getWithOtherData()}",
			"    />",
			"  ))",
			""
		],
		"description": "reactPageStory"
	},
	"reactComponentStory": {
		"prefix": "reactComponentStory",
		"body": [
			"import React from 'react'",
			"import { storiesOf } from '@storybook/react'",
			"import { action } from '@storybook/addon-actions'",
			"import {",
			"  text, number, array, boolean,",
			"} from '@storybook/addon-knobs'",
			"",
			"",
			"import ${ComponentName} from '../../src/component/'",
			"",
			"export const getDefaultData = () => (",
			"  {",
			"    isLoading: boolean('isLoading', false),",
			"    onClick: action('onClick'),",
			"  }",
			")",
			"export const getWithOtherData = () => (",
			"  {",
			"    isLoading: boolean('isLoading', false),",
			"    onClick: action('onClick'),",
			"  }",
			")",
			"",
			"storiesOf('${ComponentName}', module)",
			"  .add('default', () => (",
			"    <${ComponentName}",
			"      {...getDefaultData()}",
			"    />",
			"  )).add('withOther', () => (",
			"    <${ComponentName}",
			"      {...getWithOtherData()}",
			"    />",
			"  ))",
			""
		],
		"description": "reactComponentStory"
	}
}